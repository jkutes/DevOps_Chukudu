#!/usr/bin/env groovy
pipeline {
      /*
     * Run on any agent for the test, but better on one labeled 'docker'.
     * Docker agent will have docker, K8s, git installed at a minimum.
     */
    
    agent any
    // agent {
    //     node {
    //         //label 'docker'
    //     }
    // }

    environment {       
        SLACK_CHANNEL = "#deployment-notifications"
        SLACK_TEAM_DOMAIN = "LITECOIN-SLACK-TEAM"
        SLACK_TOKEN = credentials("slack_token")
        DEPLOY_URL = "https://deployment.example.com/"

        REGISTRY_ADDRESS = "my.registry.address.com"
        REGISTRY_AUTH = credentials("docker-registry")
        STACK_PREFIX = "LiteCoin"
    }

  stages {
    stage("Litecoin-DOCKER") {
      steps {
        echo "Building docker image"
        sh 'chmod +x 01-Docker-ayes/Dckr_run.sh'
        sh '01-Docker-ayes/Dckr_run.sh'
      }
    }

    stage("Litecoin-K8s") {
      steps {
        echo "Building K8s StatefulSet"
        sh 'chmod +x 02-k8s-FTW/K8s_run.sh'
        sh '02-k8s-FTW/K8s_run.sh'
      }
      post {
            success {
                slackSend(
                        teamDomain: "${env.SLACK_TEAM_DOMAIN}",
                        token: "${env.SLACK_TOKEN}",
                        channel: "${env.SLACK_CHANNEL}",
                        color: "good",
                        message: "${env.STACK_PREFIX} production deploy: *${env.DEPLOY_VERSION}*. <${env.DEPLOY_URL}|Access service> - <${env.BUILD_URL}|Check build>"
                )
            }

            failure {
                slackSend(
                        teamDomain: "${env.SLACK_TEAM_DOMAIN}",
                        token: "${env.SLACK_TOKEN}",
                        channel: "${env.SLACK_CHANNEL}",
                        color: "danger",
                        message: "${env.STACK_PREFIX} production deploy failed: *${env.DEPLOY_VERSION}*. <${env.BUILD_URL}|Check build>"
                )
            }
      }
    }
  }
}